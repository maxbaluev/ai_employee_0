import { render, screen, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { afterAll, beforeAll, beforeEach, describe, expect, it, vi } from 'vitest';
import { useEffect } from 'react';

import { ControlPlaneWorkspace } from '@/app/(control-plane)/ControlPlaneWorkspace';

vi.mock('@copilotkit/react-core', () => ({
  useCopilotReadable: vi.fn(),
  useCopilotAction: vi.fn(() => ({ name: 'mock', description: 'mock', parameters: [] })),
}));

vi.mock('@copilotkit/react-ui', () => ({
  CopilotSidebar: ({ children }: { children?: React.ReactNode }) => (
    <aside aria-label="Mock Copilot Sidebar">{children}</aside>
  ),
}));

const telemetryMock = vi.hoisted(() => vi.fn());
const fetchMock = vi.hoisted(() =>
  vi.fn(async () => ({
    ok: true,
    json: async () => ({ status: 'ok' }),
  })),
);

vi.mock('@/lib/telemetry/client', () => ({
  sendTelemetryEvent: (...args: unknown[]) => telemetryMock(...args),
}));

vi.mock('@/components/RecommendedToolkits', () => ({
  RecommendedToolkits: ({ onStageAdvance }: { onStageAdvance?: () => void }) => (
    <section>
      <button type="button" onClick={() => onStageAdvance?.()}>
        Continue Toolkits
      </button>
    </section>
  ),
}));

vi.mock('@/components/CoverageMeter', () => ({
  CoverageMeter: ({ onComplete }: { onComplete: (payload: Record<string, unknown>) => void }) => (
    <section>
      <button type="button" onClick={() => onComplete({ readiness: 0 })}>
        Complete Coverage
      </button>
    </section>
  ),
}));

vi.mock('@/components/PlannerInsightRail', () => ({
  PlannerInsightRail: ({
    onSelectPlay,
    onStageAdvance,
  }: {
    onSelectPlay?: (payload: Record<string, unknown>) => void;
    onStageAdvance?: () => void;
  }) => (
    <section>
      <button
        type="button"
        onClick={() => {
          onSelectPlay?.({ title: 'mock-play' });
          onStageAdvance?.();
        }}
      >
        Select Planner Play
      </button>
    </section>
  ),
}));

vi.mock('@/components/StreamingStatusPanel', () => ({
  StreamingStatusPanel: ({
    onPlanComplete,
    onDryRunComplete,
  }: {
    onPlanComplete?: () => void;
    onDryRunComplete?: () => void;
  }) => {
    useEffect(() => {
      onPlanComplete?.();
      onDryRunComplete?.();
    }, [onPlanComplete, onDryRunComplete]);

    return <aside aria-label="Streaming Panel" />;
  },
}));

vi.mock('@/components/FeedbackDrawer', () => ({
  FeedbackDrawer: ({
    onOpenChange,
    onSubmit,
  }: {
    onOpenChange?: (open: boolean) => void;
    onSubmit?: (payload: { rating: number | null; comment: string }) => void;
  }) => {
    useEffect(() => {
      onOpenChange?.(true);
    }, [onOpenChange]);

    useEffect(() => {
      onSubmit?.({ rating: 5, comment: 'Autogenerated feedback' });
    }, [onSubmit]);

    return <aside aria-label="Feedback Drawer" />;
  },
}));

vi.mock('@/components/MissionIntake', () => ({
  MissionIntake: ({ onAccept, onStageAdvance }: { onAccept: (payload: Record<string, unknown>) => void; onStageAdvance?: () => void }) => (
    <section>
      <button
        type="button"
        onClick={() => {
          onAccept({ missionId: '00000000-0000-0000-0000-000000000000' });
          onStageAdvance?.();
        }}
      >
        Complete Intake
      </button>
    </section>
  ),
}));

beforeAll(() => {
  vi.stubGlobal('fetch', fetchMock);
});

afterAll(() => {
  vi.unstubAllGlobals();
});

beforeEach(() => {
  telemetryMock.mockClear();
  fetchMock.mockClear();
});

describe('Gate G-B eight-stage flow readiness', () => {
  it('progresses through all eight stages and records stage telemetry', async () => {
    try {
      const user = userEvent.setup();

      render(
        <ControlPlaneWorkspace
          tenantId="tenant-under-test"
          initialObjectiveId={null}
          initialArtifacts={[]}
          catalogSummary={{ total_entries: 0, toolkits: 0, categories: [] }}
        />,
      );

      await user.click(await screen.findByRole('button', { name: 'Complete Intake' }));
      await user.click(await screen.findByRole('button', { name: 'Continue Toolkits' }));
      await user.click(await screen.findByRole('button', { name: 'Complete Coverage' }));
      await user.click(await screen.findByRole('button', { name: 'Select Planner Play' }));

      await waitFor(() => {
        expect(telemetryMock).toHaveBeenCalledWith(
          'tenant-under-test',
          expect.objectContaining({ eventName: 'stage_feedback_completed' }),
        );
      });
    } finally {
      // ensure no pending unhandled fetch calls between tests
      fetchMock.mockClear();
    }
  });
});
