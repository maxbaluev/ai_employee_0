# Composio LLM Field Guide (Gate G-A)

Use this index whenever you plan or execute Composio-powered missions. It distills the current docs (pulled October 7, 2025) into the flows Gate G-A needs.

## 1. Primary References
- Quickstart (authenticated tool calling workflow): https://docs.composio.dev/docs/quickstart
- Python SDK reference (`composio.Composio`, models, modifiers): https://docs.composio.dev/sdk-reference/python/python-sdk-reference
- TypeScript SDK reference (`@composio/core` Composio class): https://docs.composio.dev/sdk-reference/type-script/core-classes/composio
- Executing tools guide (provider-agnostic examples & user scoping): https://docs.composio.dev/docs/executing-tools
- Authenticating tools (auth configs, connect links, direct flows): https://docs.composio.dev/docs/authenticating-tools
- Providers index (OpenAI, Anthropic, Google, Vercel AI): https://docs.composio.dev/providers
- ROI case studies (Assista AI, Fabrile, AgentArena): https://docs.composio.dev/case-study
- Compliance & pricing: https://composio.dev/privacy | https://composio.dev/terms | https://composio.dev/pricing

## 2. Core Workflow (Agents MUST follow)
1. **Discovery** – planners sync toolkit metadata nightly (`toolkits.list`, `tools.get_raw`) so play selection can filter by tags, auth type (`no_auth` vs `oauth`), rate hints, and scopes.
2. **Auth Config Prep** – auditors create/inspect auth configs via dashboard or SDK (`auth_configs.list/get`). Record required fields for each toolkit.
3. **Quickstart Handshake** – for every governed execution:
   - Call `toolkits.authorize(user_id, toolkit)` (or `connected_accounts.initiate/link`).
   - Persist the returned `redirect_url` + `connection.id` to Supabase evidence (`connected_accounts`, `tool_calls`).
   - Block until `connection.wait_for_connection()` resolves. Guardrail pack §4 requires this before any tool runs.
4. **Tool Fetch & Invoke** – pull structured schemas with `tools.get(user_id, toolkits=[...])`; forward them into the runtime (OpenAI, Anthropic, Vercel AI, etc.). After the LLM emits tool calls, invoke:
   - Python: `composio.provider.handle_tool_calls(response=response, user_id=user_id)` or `tools.execute(...)` for manual calls.
   - TypeScript: `composio.provider.handleToolCalls(userId, completion)` or `tools.execute(...)`.
   - Capture latency, inputs, outputs, and undo plan JSON in Supabase evidence tables.
5. **Session Isolation** – when tenant-specific headers or sandbox flags are required use scoped sessions (`Composio.createSession({ headers })` in TS, or instantiate a new `Composio(..., headers={})` in Py). Never mutate the global client.
6. **Retry / Rate Handling** – obey SDK retries; on `rate_limited` apply exponential backoff (base 2, max 5). Surface CopilotKit interrupts for `invalid_scope`, quota, or quiet-hour conflicts.
7. **MCP & IDE Flows** – if an IDE uses MCP, either connect to Composio’s packaged MCP server or wrap selected toolkits so MCP tool invocations proxy to `tools.execute`.

## 3. Provider Specifics
- **OpenAI** (default): install `composio_openai` or `@composio/openai`; feed `tools.get()` results into Chat Completions/Responses and finish with `handle_tool_calls`.
- **Anthropic**: install `@composio/anthropic`; compose with `AnthropicProvider` + `messages.create`; finish via `handleToolCalls`.
- **Vercel AI SDK**: use `@composio/vercel` + `generateText`; wait for connection before prompt.
- **OpenAI Agents (Python)**: `composio_openai_agents` + `Runner.run` workflow; evidence agent must log undo plans.

## 4. Governance Hooks (map to guardrail pack §4)
- Store redirect URLs, connection IDs, chosen scopes, and toolkit slugs for every auth attempt.
- Keep Supabase `connected_accounts` rows synchronized with connection status from Composio.
- Never expose raw tokens; comply with Supabase RLS + redaction requirements.

## 5. Common Snippets

### Python Quickstart
```python
from composio import Composio
from composio_openai import OpenAIProvider
from openai import OpenAI

user_id = "user-123"
composio = Composio(provider=OpenAIProvider())
openai = OpenAI()

connection = composio.toolkits.authorize(user_id=user_id, toolkit="gmail")
print("Authorize at:", connection.redirect_url)
connection.wait_for_connection()

tools = composio.tools.get(user_id=user_id, toolkits=["GMAIL"])
completion = openai.chat.completions.create(
    model="gpt-4o",
    messages=[{"role": "user", "content": "Send a recap"}],
    tools=tools,
)
result = composio.provider.handle_tool_calls(response=completion, user_id=user_id)
print(result)
```

### TypeScript Quickstart
```ts
import { Composio } from '@composio/core';
import { OpenAIProvider } from '@composio/openai';
import OpenAI from 'openai';

const userId = 'user-123';
const composio = new Composio({
  apiKey: process.env.COMPOSIO_API_KEY,
  provider: new OpenAIProvider(),
});
const session = composio.createSession({ headers: { 'x-tenant-id': 'tenant-42' } });

const connection = await session.toolkits.authorize(userId, 'GMAIL');
console.log('Authorize at', connection.redirectUrl);
await connection.waitForConnection();

const tools = await session.tools.get(userId, { toolkits: ['GMAIL'] });
const openai = new OpenAI();
const completion = await openai.chat.completions.create({
  model: 'gpt-4o',
  messages: [{ role: 'user', content: 'Schedule a follow-up with the team' }],
  tools,
});
const result = await session.provider.handleToolCalls(userId, completion);
console.log(result);
```

### Python Trigger Subscribe + Handle
```python
from composio import Composio

user_id = "user-123"
composio = Composio()

# Create trigger instance for GitHub star events
trigger = composio.triggers.create(
    slug="GITHUB_STAR_ADDED_EVENT",
    user_id=user_id,
    connected_account_id="github-account-id"
)

# Subscribe (long-poll or async loop)
with composio.triggers.subscribe(timeout=30) as stream:
    for event in stream:
        if event.trigger_id == trigger.id:
            print(f"{event.data['repository_name']} starred by {event.data['starred_by']}")
```

### TypeScript Trigger Subscribe + Types
```ts
import { Composio } from '@composio/core';
import type { TriggerEvent } from '@composio/core';

const composio = new Composio({ apiKey: process.env.COMPOSIO_API_KEY });

const trigger = await composio.triggers.create({
  slug: 'GITHUB_STAR_ADDED_EVENT',
  userId: 'user-123',
  connectedAccountId: 'github-account-id'
});

type GitHubStarPayload = {
  action: 'created';
  repository_name: string;
  starred_by: string;
};

for await (const event of composio.triggers.subscribe<GitHubStarPayload>()) {
  if (event.triggerId === trigger.id) {
    console.log(`${event.data.repository_name} starred by ${event.data.starred_by}`);
  }
}
```

## 6. ROI + Storytelling Anchors
- **Assista AI:** 90% faster go-to-market via Composio tooling.
- **Fabrile:** Rapid Google Workspace integrations showcased at conferences.
- **AgentArena (UC Berkeley Gorilla):** Agent research platform powered by Composio tool breadth.

## 7. Trigger Handling Notes
- `composio.triggers.list_types()` and `getType()` return metadata (auth requirements, payload schemas) so planners can reason about events conversationally.
- Use `triggers.create(...)` to instantiate per-user trigger instances; store trigger IDs in Supabase for governance and undo flows.
- Subscribe via `triggers.subscribe(timeout=...)` for streaming events or `triggers.list_active(...)` for poll-style dashboards.
- Pause or disable triggers (`triggers.disable(...)`) instead of deleting to preserve audit history.
- Guardrails treat trigger invocations as mutating actions when downstream workflows execute; log every trigger event into evidence tables.

## 8. Safety Reminders
- No service-role keys or OAuth secrets in prompts/logs.
- Always log undo plans, quiet-hour overrides, scopes, and evidence artifacts.
- For `rate_limited`/`invalid_scope` events, raise CopilotKit interrupts with remediation options.
